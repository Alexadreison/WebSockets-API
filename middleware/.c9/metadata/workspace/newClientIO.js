{"filter":false,"title":"newClientIO.js","tooltip":"/newClientIO.js","undoManager":{"mark":81,"position":81,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":339,"column":2},"action":"insert","lines":["","","var clientIO = require(\"socket.io-client\");","var options = require(\"./configClient\");","","","module.exports = Object.freeze(myClient);","","","","function myClient() {","    ","    this.eventListeners = {};                           // events with its listeners as defined from user","    ","    this.eventsToWaitSocket = [];                       // event to wait a socket before emit the event","    ","    this.eventsNoWaitingSocket = [];                    // event to emit a socket without waiting","    ","}","","","","/**"," * API to create connection to the server"," * "," * params : url = string"," * "," */ ","","","myClient.prototype.newConnection = function(url) {","    ","    var self = this;","    ","    if ( self.eventListeners == {} ) {                               // if not defined listeners for events","        ","        console.log('Must define listeners for events ......');","        ","        process.exit(0);","    }","    ","    ","    self.socket = clientIO.connect(url, options);                   // new connection with its options","    ","    self.socket.on('connect', function() {","        ","        if ( !self.clientName) {","            ","            console.log(\"You must define a client name before connection \");","            ","            self.close();","            ","            process.exit(0);","        }","        ","        ","        self.socket.emit('clientName', self.clientName);                    // send client's name to server ","        ","    ","        console.log('Client connected to server ....... ');","        ","        if ( self.eventsNoWaitingSocket != [] ) {                           // if defined events without waiting to emit the socket","        ","            self.eventsNoWaitingSocket.forEach(function(val, index) {","            ","                var dataTransmit = { eventName : val.eventName, data : val.data };","    ","                dataTransmit = JSON.stringify(dataTransmit);                // serialization of data","                                ","                self.socket.emit('newMessage', dataTransmit);","   ","            });            ","        }","    });","    ","    ","    self.socket.on('newMessage', function(data) {                           // receive new packet from client","            ","        if ( typeof data !== 'string' ) {","                    ","            console.log('Received not serialized data. MUST serialize the object !!!!');","                    ","            return;","        }","                ","        data = JSON.parse(data);                                            // deserialization","            ","        var k = false;","            ","        for(var event in self.eventListeners) {             // execute the corresponiding listener for the received event name","                    ","            if ( data.eventName == event ) {","                        ","                self.eventListeners[event](data.data);","                        ","                //console.log('Data received from client (server) ..');","                        ","                k = true;","                        ","                break;","            }","        }","            ","            ","        if ( !k ) {","                ","            console.log('Not specified event listener for the event ........ ' + data.eventName);","        }","            ","        k = false;","            ","            ","        if ( self.eventsToWaitSocket != [] ) {                           // if defined events to wait before emit the socket","            ","            self.eventsToWaitSocket.forEach(function(val,index) {","                ","                if ( val.eventToWait == data.eventName ) {","                ","                    var dataTransmit = { eventName : val.eventName, data : val.data };","    ","                    dataTransmit = JSON.stringify(dataTransmit);                    // serialization of data"," ","                    self.socket.emit('newMessage', dataTransmit);","   ","                    //console.log('Data sent unicast .......... ');","                }","            });","        }","    });","    ","    ","    self.socket.on('disconnect', function() {","       ","       console.log('User disconnected .......');","       ","       self.close(); ","    });","    ","    ","    self.socket.on('error', function(error) {","       ","       console.log('Error on connection .......');","    });","    ","    ","    self.socket.on('reconnect', function() {","","       console.log('User reconnected .......');","    });","    ","    ","    self.socket.on('reconnect_attempt', function() {","       ","       console.log('User attempt to reconnect .......');","    });","    ","    self.socket.on('reconnect_failed', function() {","       ","       console.log('User failed to reconnect .......');","    });","    ","    self.socket.on('reconnect_error', function(error) {","       ","       console.log('Reconnection attempt error .......');","    });","    ","    ","};","","","","/**"," * API to attach listener to an event "," * "," * params : event = {eventName : string, listener : function }"," * "," */","","myClient.prototype.newEventListener = function(event, listener) {","    ","    if ( !event ) {                                                     // check for defined event name","            ","        console.log('You should specify an event name ');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;                                                       // return 0 for error            ","    }","        ","    if ( \"function\" !== typeof listener ) {                             // check if listener of event is defined and a Function","            ","        console.log('Your listener must be a Function');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;","    }","","    this.eventListeners[event] = listener;                              // define the new event with the correspoding listener","    ","    //console.log('Your event inserted into eventListeners ...'); ","    ","    return 1;","};","","","","/**"," * API to define events to wait an event before emit the socket"," * "," * params : event = {eventToWait : string, eventName : string, data : }"," * "," */","","myClient.prototype.newEventToWait = function(event) {","    ","    if ( \"object\" !== typeof event ) {                                      // check if event is an object","            ","        console.log('Your argument must be an object');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;","    }","    ","    if ( typeof event.eventToWait != 'string' || typeof event.eventName != 'string' ) {","        ","        console.log('EventToWait and EventName properties must be strings ');","        ","        return 0;","    }","    ","    this.eventsToWaitSocket.push(event);","    ","    //console.log('Your event to wait the socket inserted into .....');","    ","    return 1;","};","","","/** "," * API to define events to emit the socket without waiting any event"," * "," * params : event = {eventName : string, data : }"," * "," */","","myClient.prototype.newEventNoWaiting = function(event) {","    ","    if ( \"object\" !== typeof event ) {                                      // check if event is an object","            ","        console.log('Your argument must be an object');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;","    }","    ","    if ( typeof event.eventName != 'string' ) {","        ","        console.log('EventName property must be string ');","        ","        return 0;","    }","","    this.eventsNoWaitingSocket.push(event);","    ","    //console.log('Your event not to wait the socket inserted into .....');","    ","    return 1;","};","","","/**"," * API to emit the client during runtime"," * "," * params : event = {eventName: string , data : }"," * "," */","","myClient.prototype.sendEvent = function(event) {","    ","    if ( \"object\" !== typeof event ) {                                      // check if event is an object","            ","        console.log('Your argument must be an object');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;","    }","    ","    if ( typeof event.eventName != 'string' ) {","        ","        console.log('EventName property must be string ');","        ","        return 0;","    }","    ","    var dataEmit = JSON.stringify(event);                                   // serialization of data","                                ","    this.socket.emit('newMessage', dataEmit);","    ","    console.log(\"Data send during runtime ........\");","    ","    return 1;","};","","","/**"," * API to specify a client name"," * "," * params : name = string"," * ","*/","","myClient.prototype.clientName = function(name) {","    ","    if ( typeof name != 'string' ) {","        ","        console.log('Client name must be a string');","        ","        return 0;","    }","    ","    this.clientName = name;","    ","    console.log('You define a client name .......');","};","","","/**"," * API to close the websocket","*/","","myClient.prototype.close = function() {","    ","    this.socket.close();                                                    // close the socket","    ","    console.log('Socket closed ....');","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":38,"column":4},"end":{"row":39,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":55,"column":4},"end":{"row":56,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":55,"column":4},"end":{"row":55,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":1},"end":{"row":162,"column":2},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":0},"end":{"row":162,"column":1},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":161,"column":4},"end":{"row":162,"column":2},"action":"remove","lines":["","  "]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":4},"end":{"row":297,"column":5},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":5},"end":{"row":297,"column":6},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":321,"column":4},"end":{"row":321,"column":5},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":321,"column":5},"end":{"row":321,"column":6},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":235,"column":0},"end":{"row":265,"column":2},"action":"remove","lines":["/** "," * API to define events to emit the socket without waiting any event"," * "," * params : event = {eventName : string, data : }"," * "," */","","myClient.prototype.newEventNoWaiting = function(event) {","    ","    if ( \"object\" !== typeof event ) {                                      // check if event is an object","            ","        console.log('Your argument must be an object');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;","    }","    ","    if ( typeof event.eventName != 'string' ) {","        ","        console.log('EventName property must be string ');","        ","        return 0;","    }","","    this.eventsNoWaitingSocket.push(event);","    ","    //console.log('Your event not to wait the socket inserted into .....');","    ","    return 1;","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":235,"column":0},"end":{"row":236,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":235,"column":0},"end":{"row":236,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":202,"column":0},"end":{"row":234,"column":0},"action":"remove","lines":["/**"," * API to define events to wait an event before emit the socket"," * "," * params : event = {eventToWait : string, eventName : string, data : }"," * "," */","","myClient.prototype.newEventToWait = function(event) {","    ","    if ( \"object\" !== typeof event ) {                                      // check if event is an object","            ","        console.log('Your argument must be an object');","            ","        console.log('Event didn\\'t insert into');","            ","        return 0;","    }","    ","    if ( typeof event.eventToWait != 'string' || typeof event.eventName != 'string' ) {","        ","        console.log('EventToWait and EventName properties must be strings ');","        ","        return 0;","    }","    ","    this.eventsToWaitSocket.push(event);","    ","    //console.log('Your event to wait the socket inserted into .....');","    ","    return 1;","};","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":201,"column":0},"end":{"row":202,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":0},"end":{"row":201,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":0},"end":{"row":200,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":108,"column":8},"end":{"row":123,"column":9},"action":"remove","lines":["if ( self.eventsToWaitSocket != [] ) {                           // if defined events to wait before emit the socket","            ","            self.eventsToWaitSocket.forEach(function(val,index) {","                ","                if ( val.eventToWait == data.eventName ) {","                ","                    var dataTransmit = { eventName : val.eventName, data : val.data };","    ","                    dataTransmit = JSON.stringify(dataTransmit);                    // serialization of data"," ","                    self.socket.emit('newMessage', dataTransmit);","   ","                    //console.log('Data sent unicast .......... ');","                }","            });","        }"]}]}],[{"group":"doc","deltas":[{"start":{"row":108,"column":4},"end":{"row":108,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":108,"column":0},"end":{"row":108,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":107,"column":12},"end":{"row":108,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":107,"column":8},"end":{"row":107,"column":12},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":107,"column":4},"end":{"row":107,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":107,"column":0},"end":{"row":107,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":12},"end":{"row":107,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":57,"column":8},"end":{"row":68,"column":9},"action":"remove","lines":["if ( self.eventsNoWaitingSocket != [] ) {                           // if defined events without waiting to emit the socket","        ","            self.eventsNoWaitingSocket.forEach(function(val, index) {","            ","                var dataTransmit = { eventName : val.eventName, data : val.data };","    ","                dataTransmit = JSON.stringify(dataTransmit);                // serialization of data","                                ","                self.socket.emit('newMessage', dataTransmit);","   ","            });            ","        }"]}]}],[{"group":"doc","deltas":[{"start":{"row":57,"column":4},"end":{"row":57,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":57,"column":0},"end":{"row":57,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":56,"column":8},"end":{"row":57,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":29},"end":{"row":43,"column":30},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":4},"end":{"row":52,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":8},"end":{"row":52,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":77,"column":0},"end":{"row":78,"column":71},"action":"remove","lines":["                        ","                //console.log('Data received from client (server) ..');"]}]}],[{"group":"doc","deltas":[{"start":{"row":77,"column":0},"end":{"row":78,"column":24},"action":"remove","lines":["","                        "]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":4},"end":{"row":84,"column":8},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":0},"end":{"row":84,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":83,"column":12},"end":{"row":84,"column":4},"action":"remove","lines":["","    "]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":4},"end":{"row":163,"column":4},"action":"remove","lines":["//console.log('Your event inserted into eventListeners ...'); ","    "]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":0},"end":{"row":162,"column":4},"action":"remove","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":161,"column":4},"end":{"row":162,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":15},"end":{"row":191,"column":16},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":14},"end":{"row":191,"column":15},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":13},"end":{"row":191,"column":14},"action":"remove","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":12},"end":{"row":191,"column":13},"action":"remove","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":12},"end":{"row":191,"column":13},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":13},"end":{"row":191,"column":14},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":14},"end":{"row":191,"column":15},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":15},"end":{"row":191,"column":16},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":16},"end":{"row":191,"column":17},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":17},"end":{"row":191,"column":18},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":18},"end":{"row":191,"column":19},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":19},"end":{"row":191,"column":20},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":39},"end":{"row":193,"column":40},"action":"remove","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":39},"end":{"row":193,"column":40},"action":"remove","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":39},"end":{"row":193,"column":40},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":39},"end":{"row":193,"column":40},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":39},"end":{"row":193,"column":40},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":40},"end":{"row":193,"column":41},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":193,"column":35},"end":{"row":193,"column":41},"action":"remove","lines":["dataTr"]},{"start":{"row":193,"column":35},"end":{"row":193,"column":47},"action":"insert","lines":["dataTransmit"]}]}],[{"group":"doc","deltas":[{"start":{"row":194,"column":4},"end":{"row":195,"column":55},"action":"remove","lines":["","    //console.log(\"Data send during runtime ........\");"]}]}],[{"group":"doc","deltas":[{"start":{"row":194,"column":4},"end":{"row":195,"column":4},"action":"remove","lines":["","    "]}]}],[{"group":"doc","deltas":[{"start":{"row":216,"column":0},"end":{"row":217,"column":54},"action":"remove","lines":["    ","    //console.log('You define a client name .......');"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    ","    this.eventsToWaitSocket = [];                       // event to wait a socket before emit the event","    ","    this.eventsNoWaitingSocket = [];                    // event to emit a socket without waiting","    "]}]}],[{"group":"doc","deltas":[{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":14,"column":0},"end":{"row":15,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":125,"column":0},"end":{"row":126,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":208,"column":27},"end":{"row":209,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":98,"column":7},"end":{"row":98,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":98,"column":8},"end":{"row":98,"column":9},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":104,"column":7},"end":{"row":104,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":104,"column":8},"end":{"row":104,"column":9},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":110,"column":7},"end":{"row":110,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":110,"column":8},"end":{"row":110,"column":9},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":115,"column":7},"end":{"row":115,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":115,"column":8},"end":{"row":115,"column":9},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":7},"end":{"row":120,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":8},"end":{"row":120,"column":9},"action":"insert","lines":["/"]}]}]]},"ace":{"folds":[],"scrolltop":3240,"scrollleft":0,"selection":{"start":{"row":120,"column":9},"end":{"row":120,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":17,"state":"doc-start","mode":"ace/mode/javascript"}},"timestamp":1429721414467,"hash":"0a026e947e4b605a96933eafca6f37737f5923ed"}